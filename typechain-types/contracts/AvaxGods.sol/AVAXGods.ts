/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace AVAXGods {
  export type BattleStruct = {
    battleStatus: BigNumberish;
    battleHash: BytesLike;
    name: string;
    players: [AddressLike, AddressLike];
    moves: [BigNumberish, BigNumberish];
    winner: AddressLike;
  };

  export type BattleStructOutput = [
    battleStatus: bigint,
    battleHash: string,
    name: string,
    players: [string, string],
    moves: [bigint, bigint],
    winner: string
  ] & {
    battleStatus: bigint;
    battleHash: string;
    name: string;
    players: [string, string];
    moves: [bigint, bigint];
    winner: string;
  };

  export type GameTokenStruct = {
    name: string;
    id: BigNumberish;
    attackStrength: BigNumberish;
    defenseStrength: BigNumberish;
  };

  export type GameTokenStructOutput = [
    name: string,
    id: bigint,
    attackStrength: bigint,
    defenseStrength: bigint
  ] & {
    name: string;
    id: bigint;
    attackStrength: bigint;
    defenseStrength: bigint;
  };

  export type PlayerStruct = {
    playerAddress: AddressLike;
    playerName: string;
    playerMana: BigNumberish;
    playerHealth: BigNumberish;
    inBattle: boolean;
  };

  export type PlayerStructOutput = [
    playerAddress: string,
    playerName: string,
    playerMana: bigint,
    playerHealth: bigint,
    inBattle: boolean
  ] & {
    playerAddress: string;
    playerName: string;
    playerMana: bigint;
    playerHealth: bigint;
    inBattle: boolean;
  };
}

export interface AVAXGodsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "CELESTION"
      | "DEVIL"
      | "FIREBIRD"
      | "GRIFFIN"
      | "KAMO"
      | "KUKULKAN"
      | "MAX_ATTACK_DEFEND_STRENGTH"
      | "attackOrDefendChoice"
      | "balanceOf"
      | "balanceOfBatch"
      | "baseURI"
      | "battleInfo"
      | "battles"
      | "createBattle"
      | "createRandomGameToken"
      | "exists"
      | "gameTokens"
      | "getAllBattles"
      | "getAllPlayerTokens"
      | "getAllPlayers"
      | "getBattle"
      | "getBattleMoves"
      | "getPlayer"
      | "getPlayerToken"
      | "getTotalSupply"
      | "isApprovedForAll"
      | "isBattle"
      | "isPlayer"
      | "isPlayerToken"
      | "joinBattle"
      | "overallSupply"
      | "owner"
      | "playerInfo"
      | "playerTokenInfo"
      | "players"
      | "quitBattle"
      | "registerPlayer"
      | "renounceOwnership"
      | "safeBatchTransferFrom"
      | "safeTransferFrom"
      | "setApprovalForAll"
      | "setURI"
      | "supportsInterface"
      | "tokenURI"
      | "totalSupply()"
      | "totalSupply(uint256)"
      | "transferOwnership"
      | "uri"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ApprovalForAll"
      | "BattleEnded"
      | "BattleMove"
      | "NewBattle"
      | "NewGameToken"
      | "NewPlayer"
      | "OwnershipTransferred"
      | "RoundEnded"
      | "TransferBatch"
      | "TransferSingle"
      | "URI"
  ): EventFragment;

  encodeFunctionData(functionFragment: "CELESTION", values?: undefined): string;
  encodeFunctionData(functionFragment: "DEVIL", values?: undefined): string;
  encodeFunctionData(functionFragment: "FIREBIRD", values?: undefined): string;
  encodeFunctionData(functionFragment: "GRIFFIN", values?: undefined): string;
  encodeFunctionData(functionFragment: "KAMO", values?: undefined): string;
  encodeFunctionData(functionFragment: "KUKULKAN", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MAX_ATTACK_DEFEND_STRENGTH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "attackOrDefendChoice",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfBatch",
    values: [AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "baseURI", values?: undefined): string;
  encodeFunctionData(functionFragment: "battleInfo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "battles",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createBattle",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "createRandomGameToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "exists",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "gameTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllBattles",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllPlayerTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllPlayers",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getBattle", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getBattleMoves",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "isBattle", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isPlayer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isPlayerToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "joinBattle", values: [string]): string;
  encodeFunctionData(
    functionFragment: "overallSupply",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "playerInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "playerTokenInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "players",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "quitBattle", values: [string]): string;
  encodeFunctionData(
    functionFragment: "registerPlayer",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeBatchTransferFrom",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish[],
      BigNumberish[],
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(functionFragment: "setURI", values: [string]): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "uri", values: [BigNumberish]): string;

  decodeFunctionResult(functionFragment: "CELESTION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "DEVIL", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "FIREBIRD", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "GRIFFIN", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "KAMO", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "KUKULKAN", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MAX_ATTACK_DEFEND_STRENGTH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "attackOrDefendChoice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "baseURI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "battleInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "battles", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createBattle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createRandomGameToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exists", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gameTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllBattles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllPlayerTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllPlayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBattle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBattleMoves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPlayer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isBattle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isPlayer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isPlayerToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "joinBattle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "overallSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "playerInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "playerTokenInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "players", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "quitBattle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerPlayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeBatchTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uri", data: BytesLike): Result;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    account: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    account: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    account: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BattleEndedEvent {
  export type InputTuple = [
    battleName: string,
    winner: AddressLike,
    loser: AddressLike
  ];
  export type OutputTuple = [battleName: string, winner: string, loser: string];
  export interface OutputObject {
    battleName: string;
    winner: string;
    loser: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BattleMoveEvent {
  export type InputTuple = [battleName: string, isFirstMove: boolean];
  export type OutputTuple = [battleName: string, isFirstMove: boolean];
  export interface OutputObject {
    battleName: string;
    isFirstMove: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewBattleEvent {
  export type InputTuple = [
    battleName: string,
    player1: AddressLike,
    player2: AddressLike
  ];
  export type OutputTuple = [
    battleName: string,
    player1: string,
    player2: string
  ];
  export interface OutputObject {
    battleName: string;
    player1: string;
    player2: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewGameTokenEvent {
  export type InputTuple = [
    owner: AddressLike,
    id: BigNumberish,
    attackStrength: BigNumberish,
    defenseStrength: BigNumberish
  ];
  export type OutputTuple = [
    owner: string,
    id: bigint,
    attackStrength: bigint,
    defenseStrength: bigint
  ];
  export interface OutputObject {
    owner: string;
    id: bigint;
    attackStrength: bigint;
    defenseStrength: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewPlayerEvent {
  export type InputTuple = [owner: AddressLike, name: string];
  export type OutputTuple = [owner: string, name: string];
  export interface OutputObject {
    owner: string;
    name: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoundEndedEvent {
  export type InputTuple = [damagedPlayers: [AddressLike, AddressLike]];
  export type OutputTuple = [damagedPlayers: [string, string]];
  export interface OutputObject {
    damagedPlayers: [string, string];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferBatchEvent {
  export type InputTuple = [
    operator: AddressLike,
    from: AddressLike,
    to: AddressLike,
    ids: BigNumberish[],
    values: BigNumberish[]
  ];
  export type OutputTuple = [
    operator: string,
    from: string,
    to: string,
    ids: bigint[],
    values: bigint[]
  ];
  export interface OutputObject {
    operator: string;
    from: string;
    to: string;
    ids: bigint[];
    values: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferSingleEvent {
  export type InputTuple = [
    operator: AddressLike,
    from: AddressLike,
    to: AddressLike,
    id: BigNumberish,
    value: BigNumberish
  ];
  export type OutputTuple = [
    operator: string,
    from: string,
    to: string,
    id: bigint,
    value: bigint
  ];
  export interface OutputObject {
    operator: string;
    from: string;
    to: string;
    id: bigint;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace URIEvent {
  export type InputTuple = [value: string, id: BigNumberish];
  export type OutputTuple = [value: string, id: bigint];
  export interface OutputObject {
    value: string;
    id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AVAXGods extends BaseContract {
  connect(runner?: ContractRunner | null): AVAXGods;
  waitForDeployment(): Promise<this>;

  interface: AVAXGodsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  CELESTION: TypedContractMethod<[], [bigint], "view">;

  DEVIL: TypedContractMethod<[], [bigint], "view">;

  FIREBIRD: TypedContractMethod<[], [bigint], "view">;

  GRIFFIN: TypedContractMethod<[], [bigint], "view">;

  KAMO: TypedContractMethod<[], [bigint], "view">;

  KUKULKAN: TypedContractMethod<[], [bigint], "view">;

  MAX_ATTACK_DEFEND_STRENGTH: TypedContractMethod<[], [bigint], "view">;

  attackOrDefendChoice: TypedContractMethod<
    [_choice: BigNumberish, _battleName: string],
    [void],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<
    [account: AddressLike, id: BigNumberish],
    [bigint],
    "view"
  >;

  balanceOfBatch: TypedContractMethod<
    [accounts: AddressLike[], ids: BigNumberish[]],
    [bigint[]],
    "view"
  >;

  baseURI: TypedContractMethod<[], [string], "view">;

  battleInfo: TypedContractMethod<[arg0: string], [bigint], "view">;

  battles: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, string] & {
        battleStatus: bigint;
        battleHash: string;
        name: string;
        winner: string;
      }
    ],
    "view"
  >;

  createBattle: TypedContractMethod<
    [_name: string],
    [AVAXGods.BattleStructOutput],
    "nonpayable"
  >;

  createRandomGameToken: TypedContractMethod<
    [_name: string],
    [void],
    "nonpayable"
  >;

  exists: TypedContractMethod<[id: BigNumberish], [boolean], "view">;

  gameTokens: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint] & {
        name: string;
        id: bigint;
        attackStrength: bigint;
        defenseStrength: bigint;
      }
    ],
    "view"
  >;

  getAllBattles: TypedContractMethod<
    [],
    [AVAXGods.BattleStructOutput[]],
    "view"
  >;

  getAllPlayerTokens: TypedContractMethod<
    [],
    [AVAXGods.GameTokenStructOutput[]],
    "view"
  >;

  getAllPlayers: TypedContractMethod<
    [],
    [AVAXGods.PlayerStructOutput[]],
    "view"
  >;

  getBattle: TypedContractMethod<
    [_name: string],
    [AVAXGods.BattleStructOutput],
    "view"
  >;

  getBattleMoves: TypedContractMethod<
    [_battleName: string],
    [[bigint, bigint] & { P1Move: bigint; P2Move: bigint }],
    "view"
  >;

  getPlayer: TypedContractMethod<
    [addr: AddressLike],
    [AVAXGods.PlayerStructOutput],
    "view"
  >;

  getPlayerToken: TypedContractMethod<
    [addr: AddressLike],
    [AVAXGods.GameTokenStructOutput],
    "view"
  >;

  getTotalSupply: TypedContractMethod<[], [bigint], "view">;

  isApprovedForAll: TypedContractMethod<
    [account: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;

  isBattle: TypedContractMethod<[_name: string], [boolean], "view">;

  isPlayer: TypedContractMethod<[addr: AddressLike], [boolean], "view">;

  isPlayerToken: TypedContractMethod<[addr: AddressLike], [boolean], "view">;

  joinBattle: TypedContractMethod<
    [_name: string],
    [AVAXGods.BattleStructOutput],
    "nonpayable"
  >;

  overallSupply: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  playerInfo: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  playerTokenInfo: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  players: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint, boolean] & {
        playerAddress: string;
        playerName: string;
        playerMana: bigint;
        playerHealth: bigint;
        inBattle: boolean;
      }
    ],
    "view"
  >;

  quitBattle: TypedContractMethod<[_battleName: string], [void], "nonpayable">;

  registerPlayer: TypedContractMethod<
    [_name: string, _gameTokenName: string],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  safeBatchTransferFrom: TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  safeTransferFrom: TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  setURI: TypedContractMethod<[newuri: string], [void], "nonpayable">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  tokenURI: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  "totalSupply()": TypedContractMethod<[], [bigint], "view">;

  "totalSupply(uint256)": TypedContractMethod<
    [id: BigNumberish],
    [bigint],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  uri: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "CELESTION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "DEVIL"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "FIREBIRD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "GRIFFIN"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "KAMO"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "KUKULKAN"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_ATTACK_DEFEND_STRENGTH"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "attackOrDefendChoice"
  ): TypedContractMethod<
    [_choice: BigNumberish, _battleName: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<
    [account: AddressLike, id: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "balanceOfBatch"
  ): TypedContractMethod<
    [accounts: AddressLike[], ids: BigNumberish[]],
    [bigint[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "baseURI"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "battleInfo"
  ): TypedContractMethod<[arg0: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "battles"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, string] & {
        battleStatus: bigint;
        battleHash: string;
        name: string;
        winner: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "createBattle"
  ): TypedContractMethod<
    [_name: string],
    [AVAXGods.BattleStructOutput],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createRandomGameToken"
  ): TypedContractMethod<[_name: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "exists"
  ): TypedContractMethod<[id: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "gameTokens"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint] & {
        name: string;
        id: bigint;
        attackStrength: bigint;
        defenseStrength: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAllBattles"
  ): TypedContractMethod<[], [AVAXGods.BattleStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getAllPlayerTokens"
  ): TypedContractMethod<[], [AVAXGods.GameTokenStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getAllPlayers"
  ): TypedContractMethod<[], [AVAXGods.PlayerStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getBattle"
  ): TypedContractMethod<
    [_name: string],
    [AVAXGods.BattleStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBattleMoves"
  ): TypedContractMethod<
    [_battleName: string],
    [[bigint, bigint] & { P1Move: bigint; P2Move: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPlayer"
  ): TypedContractMethod<
    [addr: AddressLike],
    [AVAXGods.PlayerStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPlayerToken"
  ): TypedContractMethod<
    [addr: AddressLike],
    [AVAXGods.GameTokenStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTotalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [account: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isBattle"
  ): TypedContractMethod<[_name: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "isPlayer"
  ): TypedContractMethod<[addr: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isPlayerToken"
  ): TypedContractMethod<[addr: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "joinBattle"
  ): TypedContractMethod<
    [_name: string],
    [AVAXGods.BattleStructOutput],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "overallSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "playerInfo"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "playerTokenInfo"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "players"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint, boolean] & {
        playerAddress: string;
        playerName: string;
        playerMana: bigint;
        playerHealth: bigint;
        inBattle: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "quitBattle"
  ): TypedContractMethod<[_battleName: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "registerPlayer"
  ): TypedContractMethod<
    [_name: string, _gameTokenName: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "safeBatchTransferFrom"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setURI"
  ): TypedContractMethod<[newuri: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "totalSupply()"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupply(uint256)"
  ): TypedContractMethod<[id: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "uri"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "BattleEnded"
  ): TypedContractEvent<
    BattleEndedEvent.InputTuple,
    BattleEndedEvent.OutputTuple,
    BattleEndedEvent.OutputObject
  >;
  getEvent(
    key: "BattleMove"
  ): TypedContractEvent<
    BattleMoveEvent.InputTuple,
    BattleMoveEvent.OutputTuple,
    BattleMoveEvent.OutputObject
  >;
  getEvent(
    key: "NewBattle"
  ): TypedContractEvent<
    NewBattleEvent.InputTuple,
    NewBattleEvent.OutputTuple,
    NewBattleEvent.OutputObject
  >;
  getEvent(
    key: "NewGameToken"
  ): TypedContractEvent<
    NewGameTokenEvent.InputTuple,
    NewGameTokenEvent.OutputTuple,
    NewGameTokenEvent.OutputObject
  >;
  getEvent(
    key: "NewPlayer"
  ): TypedContractEvent<
    NewPlayerEvent.InputTuple,
    NewPlayerEvent.OutputTuple,
    NewPlayerEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RoundEnded"
  ): TypedContractEvent<
    RoundEndedEvent.InputTuple,
    RoundEndedEvent.OutputTuple,
    RoundEndedEvent.OutputObject
  >;
  getEvent(
    key: "TransferBatch"
  ): TypedContractEvent<
    TransferBatchEvent.InputTuple,
    TransferBatchEvent.OutputTuple,
    TransferBatchEvent.OutputObject
  >;
  getEvent(
    key: "TransferSingle"
  ): TypedContractEvent<
    TransferSingleEvent.InputTuple,
    TransferSingleEvent.OutputTuple,
    TransferSingleEvent.OutputObject
  >;
  getEvent(
    key: "URI"
  ): TypedContractEvent<
    URIEvent.InputTuple,
    URIEvent.OutputTuple,
    URIEvent.OutputObject
  >;

  filters: {
    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "BattleEnded(string,address,address)": TypedContractEvent<
      BattleEndedEvent.InputTuple,
      BattleEndedEvent.OutputTuple,
      BattleEndedEvent.OutputObject
    >;
    BattleEnded: TypedContractEvent<
      BattleEndedEvent.InputTuple,
      BattleEndedEvent.OutputTuple,
      BattleEndedEvent.OutputObject
    >;

    "BattleMove(string,bool)": TypedContractEvent<
      BattleMoveEvent.InputTuple,
      BattleMoveEvent.OutputTuple,
      BattleMoveEvent.OutputObject
    >;
    BattleMove: TypedContractEvent<
      BattleMoveEvent.InputTuple,
      BattleMoveEvent.OutputTuple,
      BattleMoveEvent.OutputObject
    >;

    "NewBattle(string,address,address)": TypedContractEvent<
      NewBattleEvent.InputTuple,
      NewBattleEvent.OutputTuple,
      NewBattleEvent.OutputObject
    >;
    NewBattle: TypedContractEvent<
      NewBattleEvent.InputTuple,
      NewBattleEvent.OutputTuple,
      NewBattleEvent.OutputObject
    >;

    "NewGameToken(address,uint256,uint256,uint256)": TypedContractEvent<
      NewGameTokenEvent.InputTuple,
      NewGameTokenEvent.OutputTuple,
      NewGameTokenEvent.OutputObject
    >;
    NewGameToken: TypedContractEvent<
      NewGameTokenEvent.InputTuple,
      NewGameTokenEvent.OutputTuple,
      NewGameTokenEvent.OutputObject
    >;

    "NewPlayer(address,string)": TypedContractEvent<
      NewPlayerEvent.InputTuple,
      NewPlayerEvent.OutputTuple,
      NewPlayerEvent.OutputObject
    >;
    NewPlayer: TypedContractEvent<
      NewPlayerEvent.InputTuple,
      NewPlayerEvent.OutputTuple,
      NewPlayerEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RoundEnded(address[2])": TypedContractEvent<
      RoundEndedEvent.InputTuple,
      RoundEndedEvent.OutputTuple,
      RoundEndedEvent.OutputObject
    >;
    RoundEnded: TypedContractEvent<
      RoundEndedEvent.InputTuple,
      RoundEndedEvent.OutputTuple,
      RoundEndedEvent.OutputObject
    >;

    "TransferBatch(address,address,address,uint256[],uint256[])": TypedContractEvent<
      TransferBatchEvent.InputTuple,
      TransferBatchEvent.OutputTuple,
      TransferBatchEvent.OutputObject
    >;
    TransferBatch: TypedContractEvent<
      TransferBatchEvent.InputTuple,
      TransferBatchEvent.OutputTuple,
      TransferBatchEvent.OutputObject
    >;

    "TransferSingle(address,address,address,uint256,uint256)": TypedContractEvent<
      TransferSingleEvent.InputTuple,
      TransferSingleEvent.OutputTuple,
      TransferSingleEvent.OutputObject
    >;
    TransferSingle: TypedContractEvent<
      TransferSingleEvent.InputTuple,
      TransferSingleEvent.OutputTuple,
      TransferSingleEvent.OutputObject
    >;

    "URI(string,uint256)": TypedContractEvent<
      URIEvent.InputTuple,
      URIEvent.OutputTuple,
      URIEvent.OutputObject
    >;
    URI: TypedContractEvent<
      URIEvent.InputTuple,
      URIEvent.OutputTuple,
      URIEvent.OutputObject
    >;
  };
}
